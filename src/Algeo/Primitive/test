    public static double[][] augmentedMatrix(double[][] matrix){
        double[][] augmentedMatrix = new double[matrix.length][matrix.length];
        for (int i=0;i<matrix.length;i++){
            for (int j=0;j<matrix.length;j++){
                augmentedMatrix[i][j] = matrix[i][j];
            }
        }
        for (int i=0;i<matrix.length;i++){
            for (int j=0;j<matrix.length;j++){
                if (i==j){
                    augmentedMatrix[i][j+matrix.length] = 1;
                } else {
                    augmentedMatrix[i][j+matrix.length] = 0;
                }
            }
        }
        return augmentedMatrix;


        public static String toIdentity(double[][] matrix, double[][] identity) {
        int n = matrix.length;
        identity = Algeo.Primitive.BasicFunction.getIdentity(n);
        for (int i = 0; i < n; i++) {
            if (matrix[i][i] == 0) {
                if (!GaussJordanElimination.switchRow(matrix, i)) {
                    continue;
                }
            }
            double diagonalValue = matrix[i][i];
            for (int j = 0; j < n + 1; j++) {
                matrix[i][j] /= diagonalValue;
            }
            for (int j = 0; j < n; j++) {
                if (j != i && matrix[j][i] != 0) {
                    double factor = matrix[j][i];
                    for (int k = 0; k < n + 1; k++) {
                        matrix[j][k] -= factor * matrix[i][k];
                    }
                }
            }
        }
        for (int i = 0; i < n; i++) {
            if (GaussJordanElimination.isRowZero(matrix[i])) {
                System.out.println("Inverse does not exist, Matrix is Singular.");
                return matrix;
            } }
        return matrix; 
    }